/* Auto-generated by genmsg_cpp for file /home/riemer/groovy_workspace/sandbox/flarb_lmsscanner/LMS100/srv/LMSConfig.srv */
#ifndef LMS100_SERVICE_LMSCONFIG_H
#define LMS100_SERVICE_LMSCONFIG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace LMS100
{
template <class ContainerAllocator>
struct LMSConfigRequest_ {
  typedef LMSConfigRequest_<ContainerAllocator> Type;

  LMSConfigRequest_()
  : EnableRawOutput(false)
  , FilterSelect(0)
  {
  }

  LMSConfigRequest_(const ContainerAllocator& _alloc)
  : EnableRawOutput(false)
  , FilterSelect(0)
  {
  }

  typedef uint8_t _EnableRawOutput_type;
  uint8_t EnableRawOutput;

  typedef int8_t _FilterSelect_type;
  int8_t FilterSelect;


  typedef boost::shared_ptr< ::LMS100::LMSConfigRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::LMS100::LMSConfigRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LMSConfigRequest
typedef  ::LMS100::LMSConfigRequest_<std::allocator<void> > LMSConfigRequest;

typedef boost::shared_ptr< ::LMS100::LMSConfigRequest> LMSConfigRequestPtr;
typedef boost::shared_ptr< ::LMS100::LMSConfigRequest const> LMSConfigRequestConstPtr;


template <class ContainerAllocator>
struct LMSConfigResponse_ {
  typedef LMSConfigResponse_<ContainerAllocator> Type;

  LMSConfigResponse_()
  {
  }

  LMSConfigResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::LMS100::LMSConfigResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::LMS100::LMSConfigResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LMSConfigResponse
typedef  ::LMS100::LMSConfigResponse_<std::allocator<void> > LMSConfigResponse;

typedef boost::shared_ptr< ::LMS100::LMSConfigResponse> LMSConfigResponsePtr;
typedef boost::shared_ptr< ::LMS100::LMSConfigResponse const> LMSConfigResponseConstPtr;

struct LMSConfig
{

typedef LMSConfigRequest Request;
typedef LMSConfigResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct LMSConfig
} // namespace LMS100

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::LMS100::LMSConfigRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::LMS100::LMSConfigRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::LMS100::LMSConfigRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c6eb248f21f9b82eaf060df34f21f6f2";
  }

  static const char* value(const  ::LMS100::LMSConfigRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc6eb248f21f9b82eULL;
  static const uint64_t static_value2 = 0xaf060df34f21f6f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::LMS100::LMSConfigRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "LMS100/LMSConfigRequest";
  }

  static const char* value(const  ::LMS100::LMSConfigRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::LMS100::LMSConfigRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
bool EnableRawOutput\n\
\n\
\n\
\n\
\n\
\n\
\n\
int8 FilterSelect\n\
\n\
";
  }

  static const char* value(const  ::LMS100::LMSConfigRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::LMS100::LMSConfigRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::LMS100::LMSConfigResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::LMS100::LMSConfigResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::LMS100::LMSConfigResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::LMS100::LMSConfigResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::LMS100::LMSConfigResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "LMS100/LMSConfigResponse";
  }

  static const char* value(const  ::LMS100::LMSConfigResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::LMS100::LMSConfigResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::LMS100::LMSConfigResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::LMS100::LMSConfigResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::LMS100::LMSConfigRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.EnableRawOutput);
    stream.next(m.FilterSelect);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LMSConfigRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::LMS100::LMSConfigResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LMSConfigResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<LMS100::LMSConfig> {
  static const char* value() 
  {
    return "c6eb248f21f9b82eaf060df34f21f6f2";
  }

  static const char* value(const LMS100::LMSConfig&) { return value(); } 
};

template<>
struct DataType<LMS100::LMSConfig> {
  static const char* value() 
  {
    return "LMS100/LMSConfig";
  }

  static const char* value(const LMS100::LMSConfig&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<LMS100::LMSConfigRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c6eb248f21f9b82eaf060df34f21f6f2";
  }

  static const char* value(const LMS100::LMSConfigRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<LMS100::LMSConfigRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "LMS100/LMSConfig";
  }

  static const char* value(const LMS100::LMSConfigRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<LMS100::LMSConfigResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c6eb248f21f9b82eaf060df34f21f6f2";
  }

  static const char* value(const LMS100::LMSConfigResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<LMS100::LMSConfigResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "LMS100/LMSConfig";
  }

  static const char* value(const LMS100::LMSConfigResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // LMS100_SERVICE_LMSCONFIG_H

